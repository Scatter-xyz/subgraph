// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class fractionaliseEvent extends ethereum.Event {
  get params(): fractionaliseEvent__Params {
    return new fractionaliseEvent__Params(this);
  }
}

export class fractionaliseEvent__Params {
  _event: fractionaliseEvent;

  constructor(event: fractionaliseEvent) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get originalNftContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get fractionCount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get fractionNftContract(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class mergeEvent extends ethereum.Event {
  get params(): mergeEvent__Params {
    return new mergeEvent__Params(this);
  }
}

export class mergeEvent__Params {
  _event: mergeEvent;

  constructor(event: mergeEvent) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get originalNftContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get fractionNftContract(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Fraction extends ethereum.SmartContract {
  static bind(address: Address): Fraction {
    return new Fraction("Fraction", address);
  }

  MAX_FRACTION_COUNT(): BigInt {
    let result = super.call(
      "MAX_FRACTION_COUNT",
      "MAX_FRACTION_COUNT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_FRACTION_COUNT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_FRACTION_COUNT",
      "MAX_FRACTION_COUNT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DestroyCall extends ethereum.Call {
  get inputs(): DestroyCall__Inputs {
    return new DestroyCall__Inputs(this);
  }

  get outputs(): DestroyCall__Outputs {
    return new DestroyCall__Outputs(this);
  }
}

export class DestroyCall__Inputs {
  _call: DestroyCall;

  constructor(call: DestroyCall) {
    this._call = call;
  }
}

export class DestroyCall__Outputs {
  _call: DestroyCall;

  constructor(call: DestroyCall) {
    this._call = call;
  }
}

export class FractionalizeCall extends ethereum.Call {
  get inputs(): FractionalizeCall__Inputs {
    return new FractionalizeCall__Inputs(this);
  }

  get outputs(): FractionalizeCall__Outputs {
    return new FractionalizeCall__Outputs(this);
  }
}

export class FractionalizeCall__Inputs {
  _call: FractionalizeCall;

  constructor(call: FractionalizeCall) {
    this._call = call;
  }

  get _nftContractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get fractionCount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class FractionalizeCall__Outputs {
  _call: FractionalizeCall;

  constructor(call: FractionalizeCall) {
    this._call = call;
  }
}

export class MergeCall extends ethereum.Call {
  get inputs(): MergeCall__Inputs {
    return new MergeCall__Inputs(this);
  }

  get outputs(): MergeCall__Outputs {
    return new MergeCall__Outputs(this);
  }
}

export class MergeCall__Inputs {
  _call: MergeCall;

  constructor(call: MergeCall) {
    this._call = call;
  }

  get fractionAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MergeCall__Outputs {
  _call: MergeCall;

  constructor(call: MergeCall) {
    this._call = call;
  }
}
